// https://webpack.github.io/docs/configuration.html
// internal APIs

export interface IWebpackLoaderConfig {

  // file name test
  test: RegExp|((filePath:string) => boolean);

  // whitelist
  include: string[];

  // blacklist
  exclude: string[];

  // bundle loader
  loader?: string;
  loaders?: IWebpackLoaderConfig[];
}

export interface IWebpackResolveAliasConfig {
  [Idenfifier: string]: string;
}

export interface IWebpackResolveConfig {
  root: string;
  alias: IWebpackResolveAliasConfig;
  extensions: string[];
  modulesDirectories: string[];
}

export interface IWebpackConfig {
  entry?: any;
  output?: any;
  resolve: IWebpackResolveConfig;
  preLoaders: IWebpackLoaderConfig[];
  loaders: IWebpackLoaderConfig[]
  postLoaders: IWebpackLoaderConfig[];
}

export interface IBundleLoader {
  // load({ filePath, content }): { }
}

export interface IBundleResolveResult {

  /**
   * UID hash containing the file path along with additional information
   * about how this file should be treated (loaders).
   */

  uid: string;

  /**
   * Resolved file path
   */

  filePath: string;

  /**
   * The loader for the file path
   */

  loader: IBundleLoader;
}

/**
 *
 */

export class WebpackSandboxStrategy {
  constructor(readonly webpackConfig: IWebpackConfig) {

  }

  /**
   * Results the relative file path from the cwd, and provides
   * information about how it should be treared.
   *
   * Examples:
   * const bundleInfo = resolver.resolve('text!./module.mu');
   * const bundleInfo = resolver.resolve('template!./module.mu');
   */

  resolve(relativeFilePath: string, cwd: string): IBundleResolveResult {
    return null;
  }

  /**
   * Creates a sandbox that can evaluate bundles generated by this strategy.
   */

  createRunnableEnvironment(): any {

  }

  /*
  resolve()
  createSandbox()
  createBundleLoader()
  */
}
