{

  // http://www.w3schools.com/cssref/css_selectors.asp

  const {
    IDSelectorExpression,
    SelectorLiteralExpression,
    AllSelectorExpression,
    ListSelectorExpression,
    ChildSelectorExpression,
    PseudoElementExpression,
    PseudoClassSelectorExpression,
    TagNameSelectorExpression,
    NestedSelectorExpression,
    AttributeSelectorExpression,
    ClassNameSelectorExpression,
    DescendentSelectorExpression,
    AdjacentSiblingSelectorExpression,
    ProceedingSiblingSelectorExpression,
  } = require("./ast");
}

Start = ListSelector

ListSelector = first: CombinatorSelector rest:ListSelectorRest* {
  return rest.length ? new ListSelectorExpression([first].concat(rest), location()) : first;
}

ListSelectorRest = _ "," _ selector: CombinatorSelector { return selector }

CombinatorSelector =
  DescendentSelector /
  ChildSelector /
  AdjacentSiblingSelector /
  ProceedingSiblingSelector /
  NestedSelector

NestedSelector = parent: (AllSelector/ElementSelector) child: NestedSelector? {
  return child ? new NestedSelectorExpression(parent, child) : parent;
}

ElementSelector =
  PseudoElementSelector /
  PseudoClassSelector /
  AttributeSelector /
  ClassNameSelector /
  IDSelector /
  TagNameSelector

ClassNameSelector = "." className: Word {
  return new ClassNameSelectorExpression(className, location());
}

IDSelector = "#" id: Word {
  return new IDSelectorExpression(id, location());
}

TagNameSelector = tagName: Word {
  return new TagNameSelectorExpression(tagName, location());
}

AllSelector = "*" {
  return new AllSelectorExpression(location());
}

DescendentSelector = parent:NestedSelector WS+ descendent:CombinatorSelector {
  return new DescendentSelectorExpression(parent, descendent, location());
}

ChildSelector = parent:NestedSelector _ ">" _ descendent:CombinatorSelector {
  return new ChildSelectorExpression(parent, descendent, location());
}

AdjacentSiblingSelector = parent:NestedSelector _ "+" _ descendent:CombinatorSelector {
  return new AdjacentSiblingSelectorExpression(parent, descendent, location());
}

ProceedingSiblingSelector = parent:NestedSelector _ "~" _ descendent:CombinatorSelector {
  return new ProceedingSiblingSelectorExpression(parent, descendent, location());
}

PseudoClassSelector = ":" name: Word parameter: SelectorParameter? {
  return new PseudoClassSelectorExpression(name, parameter, location());
}

PseudoElementSelector = name: PseudoElementName {
  return new PseudoElementExpression(name, null, location());
}

SelectorParameter = "(" parameter: (LiteralExpression/CombinatorSelector) ")" {
  return parameter;
}


PseudoElementName
  = "::" name: Word { return name; }
  / ":" name: ("before"/"after"/"first-line"/"first-letter"/"selection") { return name; }

AttributeSelector = "[" selector: (AttributeSelectorWithValue/AttributeSelectorWithoutValue) "]" {
  return selector;
}

AttributeSelectorWithoutValue = name: AttributeName {
  return new AttributeSelectorExpression(name, undefined, undefined, location());
}

AttributeSelectorWithValue = name: AttributeName operator: ("="/"~="/"|="/"^="/"$="/"*=") value:(Word/String) {
  return new AttributeSelectorExpression(name, operator, value, location());
}

AttributeName = [a-zA-Z0-9_-]+ { return text(); }
Word = [a-zA-Z0-9_$-]+ { return text(); }

LiteralExpression
  = value: (Number/String) {
    return new SelectorLiteralExpression(value, location());
  }

String
  = '"' characters:DoubleStringCharacter* '"' { return characters.join(""); }
  / "'" characters:SingleStringCharacter* "'" { return characters.join(""); }

Number
  = [0-9]+ { return text(); }

DoubleStringCharacter
  = !('"' / "\\") . { return text(); }
  / '\\"'

SingleStringCharacter
  = !("'" / "\\") . { return text(); }
  / "\\'"

_ = WS*

WS = [ \n\r\t]