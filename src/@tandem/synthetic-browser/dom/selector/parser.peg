{

  // http://www.w3schools.com/cssref/css_selectors.asp

  const {
    IDSelectorExpression,
    AllSelectorExpression,
    ListSelectorExpression,
    ChildSelectorExpression,
    PseudoElementExpression,
    PseudoSelectorExpression,
    TagNameSelectorExpression,
    ElementSelectorsExpression,
    AttributeSelectorExpression,
    ClassNameSelectorExpression,
    DescendentSelectorExpression,
    AdjacentSiblingSelectorExpression,
    ProceedingSiblingSelectorExpression,
  } = require("./ast");
}

Start = ListSelector

ListSelector = first: PseudoCombinator rest:ListSelectorRest* {
  return rest.length ? new ListSelectorExpression([first].concat(rest), location()) : first;
}

ListSelectorRest = _ "," _ selector: PseudoCombinator { return selector }

PseudoCombinator =
  PseudoElement /
  CombinatorSelector

CombinatorSelector =
  DescendentSelector /
  ChildSelector /
  AdjacentSiblingSelector /
  ProceedingSiblingSelector /
  ElementSelectors

ElementSelectors = first: (AllSelector/ElementSelector) rest: ElementSelector* {
  return rest.length ? new ElementSelectorsExpression([first].concat(rest), location()) : first;
}

ElementSelector =
  PseudoSelector /
  AttributeSelector /
  ClassNameSelector /
  IDSelector /
  TagNameSelector

ClassNameSelector = "." className: Word {
  return new ClassNameSelectorExpression(className, location());
}

IDSelector = "#" id: Word {
  return new IDSelectorExpression(id, location());
}

TagNameSelector = tagName: Word {
  return new TagNameSelectorExpression(tagName, location());
}

AllSelector = "*" {
  return new AllSelectorExpression(location());
}

DescendentSelector = parent:ElementSelectors " "+ descendent:CombinatorSelector {
  return new DescendentSelectorExpression(parent, descendent, location());
}

ChildSelector = parent:ElementSelectors _ ">" _ descendent:CombinatorSelector {
  return new ChildSelectorExpression(parent, descendent, location());
}

AdjacentSiblingSelector = parent:ElementSelectors _ "+" _ descendent:CombinatorSelector {
  return new AdjacentSiblingSelectorExpression(parent, descendent, location());
}

ProceedingSiblingSelector = parent:ElementSelectors _ "~" _ descendent:CombinatorSelector {
  return new ProceedingSiblingSelectorExpression(parent, descendent, location());
}

PseudoSelector = ":" name: Word parameterSelector: ParameterSelector? {
  return new PseudoSelectorExpression(name, parameterSelector, location());
}

ParameterSelector = "(" selector: PseudoCombinator ")" {
  return selector;
}

PseudoElement = elementSelector: CombinatorSelector? "::" name: Word {
  return new PseudoElementExpression(elementSelector, name, location());
}

AttributeSelector = "[" selector: (AttributeSelectorWithValue/AttributeSelectorWithoutValue) "]" {
  return selector;
}

AttributeSelectorWithoutValue = name: AttributeName {
  return new AttributeSelectorExpression(name, undefined, undefined, location());
}

AttributeSelectorWithValue = name: AttributeName operator: ("="/"~="/"|="/"^="/"$="/"*=") value:(Word/String) {
  return new AttributeSelectorExpression(name, operator, value, location());
}

AttributeName = [a-zA-Z0-9_-]+ { return text(); }
Word = [a-zA-Z0-9_$-]+ { return text(); }

String
  = '"' characters:DoubleStringCharacter* '"' { return characters.join(""); }
  / "'" characters:SingleStringCharacter* "'" { return characters.join(""); }

DoubleStringCharacter
  = !('"' / "\\") . { return text(); }
  / '\\"'

SingleStringCharacter
  = !("'" / "\\") . { return text(); }
  / "\\'"

_ = [ \n\r\t]*