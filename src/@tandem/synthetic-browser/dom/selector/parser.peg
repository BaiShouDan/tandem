{

  // http://www.w3schools.com/cssref/css_selectors.asp

  const {
    ClassNameSelectorExpression,
    IDSelectorExpression,
    AllSelectorExpression,
    TagNameSelectorExpression,
    ListSelectorExpression,
    DescendentSelectorExpression,
  } = require("./ast");

  function position() {
    return {
      start:peg$savedPos,
      end:peg$currPos
    };
  }
}

Start = ListSelector

ListSelector = first:CombinatorSelector rest:ListSelectorRest* {
  return rest.length ? new ListSelectorExpression([first].concat(rest), position) : first;
}

ListSelectorRest = _ "," _ selector: CombinatorSelector { return selector }

CombinatorSelector = DescendentSelector/ElementSelector

ElementSelector = ClassNameSelector/IDSelector/AllSelector/TagNameSelector

ClassNameSelector = "." className: Word {
  return new ClassNameSelectorExpression(className, position());
}

IDSelector = "#" id: Word {
  return new IDSelectorExpression(id, position());
}

TagNameSelector = tagName: Word {
  return new TagNameSelectorExpression(tagName, position());
}

AllSelector = "*" {
  return new AllSelectorExpression(position());
}

DescendentSelector = parent:ElementSelector " "+ descendent:CombinatorSelector {
  return new DescendentSelectorExpression(parent, descendent);
}


Word = [a-zA-Z0-9_$-]+ { return text(); }

_ = [ \n\r\t]*