{
  const {
    DeclListExpression,
    DeclCallExpression,
    DeclColorExpression,
    DeclDegreeExpression,
    DeclStringExpression,
    DeclNumberExpression,
    DeclSpaceListExpression,
    DeclCommaListExpression,
    DeclIdentifierExpression,
    DeclMeasurementExpression,
  } = require("./ast");
}

Start
  = CommaList

CommaList 
  = first: SpaceList rest: CommaListRest* {
    return rest.length ? new DeclCommaListExpression([first].concat(rest), location()) : first;
  }

SpaceList 
  = first: Expression rest: SpaceListRest* {
    return rest.length ? new DeclSpaceListExpression([first].concat(rest), location()) : first;
  }

CommaListRest
  = "," _ expr: SpaceList {
    return expr;
  }

SpaceListRest
  = " " expr: Expression {
    return expr;
  }

Expression 
  = Degree/Measurement/Number/Color/String/Call/Identifier

Measurement 
  = number: Number unit: ("%"/"cm"/"em"/"ex"/"in"/"mm"/"pc"/"pt"/"px"/"vh"/"vw"/"vmin") {
    return new DeclMeasurementExpression(number.value, unit, location());
  }

Degree 
  = number: Number "deg" {
    return new DeclDegreeExpression(number.value, location());
  }

Color 
  = "#" color: [a-zA-Z0-9]+ {
    return new DeclColorExpression(color, location());
  }

Call
  = id: Identifier "(" params: CommaList ")" {
    return new DeclCallExpression(id, params.items || [params], location());
  }

Identifier 
  = [a-zA-Z\-]+ {
    return new DeclIdentifierExpression(text(), location());
  }

Number 
  = "-"?("."[0-9]+/[0-9]+("."[0-9]+)?) {
    return new DeclNumberExpression(Number(text()), location());
  }

String
  = '"' characters:DoubleStringCharacter* '"' { return new DeclStringExpression(characters.join(''), location()); }
  / "'" characters:SingleStringCharacter* "'" { return new DeclStringExpression(characters.join(''), location()); }


DoubleStringCharacter
  = !('"' / "\\") . { return text(); }
  / '\\"'

SingleStringCharacter
  = !("'" / "\\") . { return text(); }
  / "\\'"

_
  = [ \n\r\t]*