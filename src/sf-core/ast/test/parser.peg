{
const {
  DeclarationExpression,
  NumberExpression,
  ReferenceExpression,
  AssignmentExpression,
  FunctionCallExpression,
  GroupExpression,
} = require("./expressions");

function position() {
  return {
    start:peg$savedPos,
    end:peg$currPos
  };
}
}

Start
  = Expressions

Expressions
  = expressions: Expression* {
    return new GroupExpression(expressions);
  }

Expression
  = Statement ";"

Statement
  = Assignment/Declaration/Number/FunctionCall

Assignment
  = _ name: ReferenceName _ "=" _ value: Statement {
    return new AssignmentExpression(name, value, position());
  }

ReferenceName
  = name: [a-zA-Z]+[\w\d+$_]* {
    return text();
  }

Reference
  = name: ReferenceName {
    return new ReferenceExpression(name, position());
  }

Declaration
  = name: Variable _ "=" _ value: Statement {
    return new DeclarationExpression(name, value, position());
  }
  / name: Variable {
    return new DeclarationExpression(name, undefined, position());
  }

Number
  = "-"? [0-9]+ (.[0-9]+)? {
    return new NumberExpression(Number(text()), position());
  }

FunctionCall
  = reference: (Declaration/Reference) _ "(" parameters: Parameters*  ")" _ {
    return new FunctionCallExpression(reference, parameters, position());
  }

Parameters
  = param: Expression rest: RestParameter* {
    return [param].concat(rest);
  }

RestParameter
  = _ "," _ expr: Expression { return expr; }

Variable
  = "var " name: ReferenceName {
    return name;
  }
_
  = [ \t\r\n]*