{
const {
  LiteralExpression,
  CSSRuleExpression,
  CSSStyleExpression,
  CSSLiteralExpression,
  CSSListValueExpression,
  CSSStyleSheetExpression,
  CSSFunctionCallExpression,
  CSSStyleDeclarationExpression,
} = require("./expressions");

function position() {
  return {
    start:peg$savedPos,
    end:peg$currPos
  };
}
}

Start
  = CSSStyleSheetExpression

CSSStyleSheetExpression
  = rules:CSSRule* {
    return new CSSStyleSheetExpression(rules);
  }

CSSRule
  = _ selector: CSSSelector _ "{" style: CSSStyle "}" _ {
    return new CSSRuleExpression(selector, style);
  }

CSSStyle
  = _ declarations: CSSStyleDeclaration* _ {
    return new CSSStyleExpression(declarations, position());
  }

CSSSelector
  = CSSSelectorCharacter* { return text().trim(); }

CSSSelectorCharacter
  = !("{") . { return text(); }

CSSStyleDeclaration
  = !("}") _ key:CSSStyleDeclarationKey _ ':' _ value:CSSStyleDeclarationValue _ ';' _ {
    return new CSSStyleDeclarationExpression(key, value, position());
  }

CSSStyleDeclarationKey
  = value:([^:]+) {
    return text();
  }

CSSStyleDeclarationValue
  = CSSListValue/CSSSingleValue

CSSSingleValue
  = CSSFunctionCall/CSSLiteralValue

CSSLiteralValue
  = value:CSSValue {
    return new CSSLiteralExpression(text(), position());
  }

CSSFunctionCall
  = name:CSSValue parameters:Parameters {
    return new CSSFunctionCallExpression(name, parameters, position());
  }

Parameters
  = '(' parameters:CSSCommaList ')' {
    return parameters;
  }
  /  '(' ')' {
    return [];
  }

CSSListValue
  = values:(CSSSpaceList/CSSCommaList) {
    return values.length === 1 ? values[0] : new CSSListValueExpression(values, position());
  }

CSSCommaList
  = first:CSSSingleValue rest:(',' _ CSSSingleValue)*  {
    return [first].concat(rest.map(function (v) {
      return v[1];
    }));
  }

CSSSpaceList
  = first:CSSSingleValue rest:(' ' CSSSingleValue)* {
    return [first].concat(rest.map(function (v) {
      return v[1];
    }));
  }

CSSValue
  = CSSValueCharacter+ { return text(); }

CSSValueCharacter
  = !([ ;,)(]). { return text(); }
/**
 * Generic
 */

Number
  = (Digit '.' Digit+) / ('.' Digit+) / Digit {
    return new LiteralExpression(Number(text()), position());
  }

Digit
  = [0-9]

_
  = [ \n\r\t]*
