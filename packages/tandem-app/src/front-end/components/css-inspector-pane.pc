<link rel="import" href="./global.pc" />
<link rel="import" href="./pane.pc" />
<link rel="import" href="./gutter.pc" />
<link rel="import" href="./tooltip.pc" />
<link rel="import" href="./color-picker.pc" />
<link rel="import" href="./css-declaration-input.pc" />
<link rel="stylesheet" href="./ionicons/css/ionicons.css" />

<component id="td-style-declaration">
  <meta name="internal" content="true" />
  <style>

    :host([ignored]) {
      opacity: 0.2;
    }

    :host([disabled]) .name, :host([disabled]) td-css-expr-input, :host([disabled]) .raw-value {
      opacity: 0.2;
    }

    :host {
      display: block;
      padding: var(--base6) var(--base8);
    }
    .toggle-button {
      float: right;
      cursor: pointer;
      display: inline-block;
    }

    .ion-eye {
      display: none;
    }
    :host:hover .toggle-button, :host([hovering]) .toggle-button {
      display: inline-block;
    }
    :host([overridden]) span {
      text-decoration: line-through;
      color: var(--font-color-dim);
    }
    .name {
      color: var(--font-color-dim);
    }
    .name::after {
      content: ": ";
    }

    input {
      border: none;
      background: var(--background-deep);
      border-radius: var(--base);
      color: var(--font-color);
      width: 33%;
    }

    
  </style>
  <template>
    <span [[if editingName]]>
      <input type="text" value=[[bind name]] />
    </span>
    <span [[else]] class="name">[[bind name]]</span>

    <span [[if editingValue]]>
      <input type="text" value=[[bind sourceValue]] />
    </span>
    <td-css-expr-input [[elseif !overridden && value]] value=[[bind value]] />
    <span [[else]] name="raw-value">
      [[bind sourceValue]]
    </span>

    <i [[if !disabled]] class="toggle-button ion-eye" onClick=[[bind onToggleDeclarationClick]]></i>
    <i [[else]] class="toggle-button ion-eye-disabled" onClick=[[bind onToggleDeclarationClick]]></i>

  </template>
</component>

<component id="td-style-rule">
  <meta name="internal" content="true" />
  <style>

    :host:hover td-gutter-subheader span, :host([headerHovering]) .controls {
      /* TODO */
    }
    .source {
      text-decoration: underline;
      color: var(--font-color-dim);
      white-space: nowrap;
    }
    .name {
      color: var(--font-color-dim);
      padding-right: var(--base4);
    }
    .
    .name::aftera {
      content: ":";
    }
    .value {
      color: var(--font-color-alt);
    }

    .inherited {
      margin-right: var(--base6);
      padding: var(--base) var(--base3);
      display: inline;
      font-size: 0.6em;
      text-transform: uppercase;
      background: var(--border-color-deep);
      color: var(--font-color-invert);
      border-radius: 1px;
    }

    .selector-text {
      width: 100%;
      word-break: break-word;
      margin-right: var(--base4);
      display: inline-block;
    }

    .space {
      display: inline-block;
    }

    td-gutter-subheader {
      display: flex;
      flex-direction: row;
    }

    .add-declaration-button {
      cursor: pointer;
    }

  </style>
  <template>
    <td-gutter-subheader>
      <span class="selector-text">
        [[bind label]]
      </span>
      <span class="inherited" [[if inherited]]>
        inherited
      </span>
      <span class="space">
      </span>
      <span class="add-declaration-button" onClick=[[bind onAddDeclarationClick]]>
        +
      </span>
    </td-gutter-subheader>

    <td-list>
      <td-list-item [[if declarations]] [[repeat declarations as declaration]] noPadding>
        <td-style-declaration [[bind declaration]] key=[[bind declaration.name]] />
      </td-list-item>
    </td-list>
  </template>
</component>

<component id="td-css-inspector-pane">
  <template>
    <td-pane>
      <span slot="header">
        CSS Inspector
      </span>
      <span slot="content">
        <td-style-rule [[if styleRules]] [[repeat styleRules as styleRule]] [[bind styleRule]] key=[[bind styleRule.rule.assocId]] />
      </span>
    </td-pane>
  </template>
  <preview name="main" width="200" height="300">
    <td-css-inspector-pane styleRules=[[bind [
      {
        label: ".container",
        source: { uri: "styles.css" },
        element: {
          tagName: "div"
        },
        rule: {
          assocId: 1
        },
        onAddDeclarationClick: null,
        declarations: [
          { 
            name: "color",
            sourceValue: "red",
            value: {
              type: "COLOR",
              value: "red"
            },
            hovering: true,
            onToggleDeclarationClick: null
          },
          { 
            name: "flex",
            sourceValue: "1",
            value: {
              type: "NUMBER",
              value: 1
            },
            disabled: true,
            onToggleDeclarationClick: null
          },
          { 
            name: "flex-direction",
            sourceValue: "row",
            value: {
              type: "KEYWORD",
              name: "row"
            },
            hovering: true,
            onToggleDeclarationClick: null
          },
          { 
            name: "background",
            sourceValue: "background(255, 255, 255 0)",
            ignored: true,
            value: {
              type: "CALL",
              name: "rgb",
              returnType: "COLOR",
              returnValue: "rgb(255, 255, 0)",
              params: [
                {
                  type: "NUMBER",
                  value: 255,
                },
                {
                  type: "NUMBER",
                  value: 255,
                },
                {
                  type: "NUMBER",
                  value: 0
                }
              ]
            },
            onToggleDeclarationClick: null
          },
          { 
            name: "margin-top",
            sourceValue: "10px",
            value: {
              type: "MEASUREMENT",
              value: "10",
              unit: "px"
            },
            onToggleDeclarationClick: null
          },
          { 
            name: "text-transform",
            editingName: true,
            sourceValue: "uppercase",
            value: {
              type: "MEASUREMENT",
              value: "10",
              unit: "px"
            },
            onToggleDeclarationClick: null
          },
          { 
            name: "margin",
            editingValue: true,
            sourceValue: "uppercase",
            value: {
              type: "MEASUREMENT",
              value: "10",
              unit: "px"
            },
            onToggleDeclarationClick: null
          }
        ]
      },
      {
        label: ".header",
        headerHovering: true,
        rule: {
          assocId: 1
        },
        onAddDeclarationClick: null,
        declarations: [
          { 
            name: "background",
            sourceValue: null,
            value: {
              type: "COMMA_LIST",
              items: [
                {
                  type: "SPACED_LIST",
                  items: [
                    {
                      type: "CALL",
                      name: "rgb",
                      returnType: "COLOR",
                      returnValue: "rgb(255, 0, 255)",
                      params: [
                        {
                          type: "NUMBER",
                          value: 255
                        },
                        {
                          type: "NUMBER",
                          value: 0
                        },
                        {
                          type: "NUMBER",
                          value: 255
                        }
                      ]
                    },
                    {
                      type: "KEYWORD",
                      name: "no-repeat"
                    }
                  ]
                },
                {
                  type: "SPACED_LIST",
                  items: [
                    {
                      type: "CALL",
                      name: "rgb",
                      returnType: "COLOR",
                      returnValue: "rgb(255, 100, 0)",
                      params: [
                        {
                          type: "NUMBER",
                          value: 255
                        },
                        {
                          type: "NUMBER",
                          value: 100
                        },
                        {
                          type: "NUMBER",
                          value: 0
                        }
                      ]
                    },
                    {
                      type: "KEYWORD",
                      name: "no-repeat"
                    }
                  ]
                }
              ]
            },
            onToggleDeclarationClick: null
          },
          {
            name: "padding",
            sourceValue: null,
            value: {
              type: "CALL",
              name: "var",
              returnType: null,
              returnValue: null,
              params: [
                {
                  type: "KEYWORD",
                  name: "--padding"
                }
              ]
            },
            onToggleDeclarationClick: null
          },
          {
            name: "color",
            sourceValue: null,
            overridden: true,
            value: {
              type: "CALL",
              name: "var",
              open: true,
              source: "var(---font-color)",
              returnType: "COLOR",
              returnValue: "#CCCCCC",
              params: [
                {
                  type: "KEYWORD",
                  name: "--font-color"
                }
              ]
            },
            onToggleDeclarationClick: null
          }
        ]
      },
      {
        label: "body, html",
        inherited: true,
        rule: {
          assocId: 1
        },
        onAddDeclarationClick: null,
        declarations: [
          { 
            name: "padding",
            ignored: true,
            sourceValue: null,
            value: {
              type: "SPACED_LIST",
              items: [
                {
                  type: "MEASUREMENT",
                  value: 10,
                  unit: "px"
                },
                {
                  type: "MEASUREMENT",
                  value: 20,
                  unit: "px"
                }
              ]
            },
            onToggleDeclarationClick: null
          }
        ]
      }
    ]]] />
  </preview>
</component>

<component id="css-inspector-multiple-items-selected">
  <style> 
    .content {
      padding: var(--base6);
    }
  </style>
  <template>
    <td-pane>
      <span slot="header">
        CSS Inspector
      </span>
      <div slot="content" class="content">
        Please select only one element to edit CSS 
        properties.
      </div>
    </td-pane>
  </template>
  <preview name="main" width="250" height="200">
    <css-inspector-multiple-items-selected />
  </preview>
</component>
