<link rel="import" href="./global.pc" />
<link rel="import" href="./pane.pc" />
<link rel="import" href="./gutter.pc" />
<link rel="import" href="./tooltip.pc" />
<link rel="import" href="./color-picker.pc" />
<link rel="import" href="./css-declaration-input.pc" />

<component id="td-style-declaration">
  <property name="declaration" />
  <style>
    .name {
      color: var(--font-color-dim);
    }
    .name:after {
      content: ": ";
    }
  </style>
  <script type="text/typescript"> 
    const { CSSDeclarationExpressionType, parseDeclarationValue } = require("./utils/css.ts");
    const dispatch = (event) => {
      if (event.type === "EXPR_CHANGED") {
        const { location: { start, end }, value: newExprValue } = event;
        const newValue = this.declaration.value.substr(0, start) + newExprValue + this.declaration.value.substr(end);
        dispatch({ type: "DECLARATION_CHANGED", name: this.declaration.name, value: newValue });
      }
    }
  </script>
  <template>
    <span class="name">{{this.declaration.name}}</span>
    <td-css-expr-input expr={{parseDeclarationValue(this.declaration.value)}} dispatch={{dispatch}} />
  </template>
</component>

<component id="td-style-rule">
  <property name="styleRule" />
  <style>
    .source {
      float: right;
      text-decoration: underline;
      color: var(--font-color-dim);
    }
    .name {
      color: var(--font-color-dim);
      padding-right: var(--base4);
    }
    .name:after {
      content: ":";
    }
    .value {
      color: var(--font-color-alt);
    }

    .value:after {
    }
  </style>
  <script>
    const dispatch = (event) => {
      console.log("CHANGED");
    }
  </script>
  <template>
    <td-gutter-subheader>
      {{this.styleRule && this.styleRule.selectorText}}
      <span class="source">
        {{this.styleRule && this.styleRule.source && this.styleRule.source.uri}}
      </span>
    </td-gutter-subheader>

    <td-list>
      <td-list-item pc-if={{this.styleRule}} pc-repeat="this.styleRule.declarations as declaration">
        <td-style-declaration name="background-color" declaration={{declaration}} dispatch={{dispatch}} />
      </td-list-item>
    </td-list>
  </template>
</component>

<schema id=">

</schema>

<component id="td-css-inspector-pane">
  <property name="styleRules" schema="style-rule" />
  <template>
    <td-pane>
      <span slot="header">
        CSS Inspector
        <div class="controls">
          <i class="ion-more" />
        </div>
      </span>
      <span slot="content">
        <td-style-rule pc-if={{this.styleRules}} pc-repeat="this.styleRules as styleRule" styleRule={{styleRule}} />
      </span>
    </td-pane>
  </template>
</component>

<component id="td-css-inspector-pane-example">
  <script>
    const styleRules = [
      {
        selectorText: ".test",
        source: {
          uri: "global.pc"
        },
        declarations: [
          { name: "color", value: "rgba(0,0,0,0.5)" },
          { name: "transform", value: "var(--root)" },
          { name: "transform", value: "blue" }
        ]
      }
    ];
  </script>
  <template>
    <td-css-inspector-pane styleRules={{styleRules}} />
  </template>
</component>

<td-preview>
  <td-css-inspector-pane-example />
</td-preview>