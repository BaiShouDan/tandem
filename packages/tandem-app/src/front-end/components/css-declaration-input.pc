<link rel="import" href="./global.pc" />
<link rel="import" href="./pane.pc" />
<link rel="import" href="./gutter.pc" />
<link rel="import" href="./tooltip.pc" />
<link rel="import" href="./color-picker.pc" />

<component id="td-css-color-expr-input">
  <property name="dispatch" default={{this.dispatch}} />
  <style>
    .input-box {
      width: var(--base4);
      height: var(--base4);
      margin: 0px var(--base2);
      background: red;
      position: relative;
      top: 1px;
      display: inline-block;
      border-radius: 2px;
      border: 1px solid rgba(0,0,0,0.3);
    }
  </style>
  <template>
    <td-color-mini-input value={{this.expr.value}} dispatch={{this.dispatch}} />
    <span>{{this.expr.value}}</span>
  </template>
</component>

<component id="td-keyword-expr-input">
  <property name="expr" />
  <style>
    
  </style>
  <template>
    <span>{{this.expr && this.expr.name}}</span>
  </template>
</component>

<component id="td-css-number-expr-input">
  <property name="expr" />
  <style>
    .input-box {
      width: var(--base4);
      height: var(--base4);
      margin: 0px var(--base2);
      background: red;
      position: relative;
      top: 1px;
      display: inline-block;
      border-radius: 2px;
      border: 1px solid rgba(0,0,0,0.3);
    }
  </style>
  <template>
    <span>{{this.expr && this.expr.value}}</span>
  </template>
</component>

<component id="td-color-mini-input">
  <property name="value" default="1" />
  <property name="open" default={{false}} />
  <property name="dispatch" default={{noop}} />
  <style>
    .input-box {
      width: var(--base4);
      height: var(--base4);
      margin: 0px var(--base2);
      background: red;
      position: relative;
      top: 1px;
      display: inline-block;
      border-radius: 2px;
      border: 1px solid rgba(0,0,0,0.3);
    }
  </style>
  <template>
    <td-tooltip show={{this.open}}>
      <div slot="button" class="input-box" style={{{background: this.value}}} /> 

      <!-- TODO - fix me - super slow -->
      <!-- need to not render this until slot is present -->
      <td-color-picker value={{this.value}} dispatch={{this.dispatch}} />
    </td-tooltip>
  </template>
</component>

<component id="td-css-call-expr-input">
  <property name="expr" />
  <property name="open" default={{false}} />
  <property name="dispatch" default={{noop}} />
  <style>
    td-css-expr-input::after {
      content: ", ";
    }

    td-css-expr-input:last-of-type::after {
      content: "";
    }
  </style>
  <script type="text/typescript">
    const { stringifyCSSExpression } = require("./utils/css.ts");
  </script>
  <template>
    
    <!-- mini inputs for function -->
    <td-color-mini-input pc-if={{this.expr.name === "rgb" || this.expr.name === "rgba"}} open={{this.open}} value={{stringifyCSSExpression(this.expr)}} dispatch={{this.dispatch}} /> 

    <span>{{this.expr.name}}(</span>
      <td-css-expr-input pc-repeat="this.expr.params as param" context={{this.expr}} expr={{param}} dispatch={{this.dispatch}} />
    <span>)</span>
  </template>
</component>

<component id="td-css-expr-input">
  <property name="expr" />
  <property name="context" />
  <property name="open" />
  <property name="dispatch" default={{noop}} />
  <style>
    :host {
      display: inline;
    }
    span {
      color: red;
    }
  </style>
  <script type="text/typescript"> 
    import { CSSDeclarationExpressionType } from "./utils/css.ts";
    const { COLOR, CALL, NUMBER, KEYWORD } = CSSDeclarationExpressionType;

    const dispatch = (event) => {
      if (event.type === "VALUE_CHANGED") {      
        this.dispatch({ type: "EXPR_CHANGED", value: event.value, location: this.expr.location });
      } else {
        this.dispatch(event);
      }
    }
  </script>
  <template> 
    <td-css-call-expr-input pc-if={{this.expr && this.expr.type === CALL}} expr={{this.expr}} open={{this.open}} dispatch={{dispatch}} />
    <td-css-color-expr-input pc-elseif={{this.expr && this.expr.type === COLOR}} expr={{this.expr}} open={{this.open}} dispatch={{dispatch}}  />
    <td-css-number-expr-input pc-elseif={{this.expr && this.expr.type === NUMBER}} expr={{this.expr}} open={{this.open}} dispatch={{dispatch}}  />
    <td-keyword-expr-input pc-elseif={{this.expr && this.expr.type === KEYWORD}} context={{this.context}} expr={{this.expr}} dispatch={{dispatch}} />
    <span pc-else>
      {{this.expr && this.expr.value}}
    </span>
  </template>
</component>

<component id="td-css-expr-input-example">
  <property name="value" />
  <property name="open" default={{true}} />
  <script type="text/typescript">
    const { parseDeclarationValue } = require("./utils/css.ts");
    const dispatch = ({ type, value }) => {
      this.value = value;
    };
  </script>
  <template>
    <td-css-expr-input open={{this.open}} expr={{this.value && parseDeclarationValue(this.value)}} dispatch={{dispatch}} />
  </template>
</component>

<td-preview>
  <td-css-expr-input-example value="rgba(84, 172, 88, 0.60)" />
</td-preview>