{
  const {
    CSSStyleExpression,
    CSSStyleDeclaration,
    CSSLiteralExpression,
    CSSFunctionCallExpression,
    CSSListValueExpression,
    LiteralExpression
  } = require('./expressions');
}

Start
  = CSSStyle

CSSStyle
  = declarations:CSSStyleDeclaration* {
    return new CSSStyleExpression(declarations);
  }

CSSStyleDeclaration
  = _ key:CSSStyleDeclarationKey _ ':' _ value:CSSStyleDeclarationValue _ ';' {
    return new CSSStyleDeclaration(key, value);
  }

CSSStyleDeclarationKey
  = value:([^:]+) {
    return text();
  }

CSSStyleDeclarationValue
  = CSSListValue/CSSSingleValue

CSSSingleValue
  = CSSFunctionCall/CSSLiteralValue

CSSLiteralValue 
  = value:CSSValue {
    return new CSSLiteralExpression(text());
  }

CSSFunctionCall
  = name:CSSValue parameters:Parameters {
    return new CSSFunctionCallExpression(name, parameters);
  }

Parameters
  = '(' parameters:CSSCommaList ')' {
    return parameters;
  }
  /  '(' ')' {
    return [];
  }

CSSListValue 
  = values:(CSSSpaceList/CSSCommaList) {
    return values.length === 1 ? values[0] : new CSSListValueExpression(values);
  }

CSSCommaList
  = first:CSSSingleValue rest:(',' _ CSSSingleValue)*  {
    return [first].concat(rest.map(function (v) {
      return v[1];
    }));
  }

CSSSpaceList
  = first:CSSSingleValue rest:(' ' CSSSingleValue)* {
    return [first].concat(rest.map(function (v) {
      return v[1];
    }));
  }
  
CSSValue
  = [^ ;,\(\)]+

/** 
 * Generic
 */

Number 
  = (Digit '.' Digit+) / ('.' Digit+) / Digit {
    return new LiteralExpression(Number(text()));
  }

Digit
  = [0-9] 

_
  = [ \n\r\t]*
